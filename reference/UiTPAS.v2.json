{
  "openapi": "3.0.0",
  "info": {
    "title": "UiTPAS API Reference",
    "version": "2.0",
    "contact": {
      "name": "publiq helpdesk",
      "email": "vragen@publiq.be"
    },
    "description": "With UiTPAS API 2.0 you can retrieve ticket sale prices for specific UiTPAS numbers, and register ticket sales for specific UiTPAS numbers.\n\nFuture versions will also include support for more features like saving points and exchanging them for benefits."
  },
  "servers": [
    {
      "url": "https://api-test.uitpas.be",
      "description": "Testing"
    },
    {
      "url": "https://api.uitpas.be",
      "description": "Production"
    }
  ],
  "tags": [
    {
      "name": "Events"
    },
    {
      "name": "Financial reports"
    },
    {
      "name": "Organizers"
    },
    {
      "name": "Passholders"
    },
    {
      "name": "Permissions"
    },
    {
      "name": "Schools"
    },
    {
      "name": "Ticket sales"
    }
  ],
  "paths": {
    "/tariffs": {
      "parameters": [],
      "get": {
        "summary": "Get tariffs",
        "tags": [
          "Ticket sales"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tariff"
                  }
                },
                "examples": {
                  "Single tariff example": {
                    "value": [
                      {
                        "id": "SOCIALTARIFF",
                        "name": "Kansentarief",
                        "price": 1.5
                      }
                    ]
                  },
                  "Multiple tariffs example": {
                    "value": [
                      {
                        "id": "SOCIALTARIFF",
                        "name": "Kansentarief",
                        "price": 1.5
                      },
                      {
                        "id": "COUPON1234",
                        "name": "Cultuurbon 6 euro",
                        "price": 4
                      },
                      {
                        "id": "COUPON2345",
                        "name": "2 euro korting op een specifiek event",
                        "price": 8
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The response will include a JSON body with more details in the form of a RFC7807 error model. Possible error types:\n\n* https://api.publiq.be/probs/uitpas/event-not-found\n* https://api.publiq.be/probs/uitpas/invalid-uitpasnumber\n* https://api.publiq.be/probs/uitpas/passholder-not-found\n* https://api.publiq.be/probs/uitpas/social-tariff-expired\n\n",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Event not found": {
                    "value": {
                      "type": "https://api.publiq.be/probs/uitpas/event-not-found",
                      "title": "Event id 267B6FCF-46F8-4DA2-8D7D-AADCD2C2715E not found",
                      "status": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "operationId": "get-tariffs",
        "description": "Returns the possible UiTPAS discounted **tariffs for an event and a passholder**.\n\nThis UiTPAS tariffs are calculated based on:\n\n- **The regular price** of the ticket.\nThis is the price your user would have to pay for the specific ticket without UiTPAS discount.\n- **The UiTPAS number** of the passholder. UiTPAS discounts are personal so it's important to identify the passholder to retrieve a list of possible tariffs.\n- **The event id** of the UiTdatabank event. UiTPAS discounts are limited to specific UiTdatabank events, so it's important to specify the event id to retrieve a list of possible tariffs.\n\n> ##### Important\n> The regular price of the ticket should generally be one of the price categories set on the event in UiTdatabank to make financial reporting clearer.\n\nThe caller of this request must have `TICKETSALE_REGISTER` permission for the organizer of the given event.",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "regularPrice",
            "description": "The regular price the passholder would have to pay for the ticket if they are not eligible for discounts",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "eventId",
            "description": "The id of the event for which the ticket is sold",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "uitpasNumber",
            "description": "UiTPAS Number identifying the passholder who wants to buy a ticket",
            "required": true
          }
        ]
      }
    },
    "/ticket-sales": {
      "parameters": [],
      "post": {
        "summary": "Register ticket sale(s)",
        "tags": [
          "Ticket sales"
        ],
        "operationId": "post-ticket-sales",
        "responses": {
          "200": {
            "description": "Ticket sale registration(s) succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketSaleRegistration"
                  }
                },
                "examples": {
                  "Single ticket sale example": {
                    "value": [
                      {
                        "id": 21345,
                        "tariff": {
                          "id": "COUPON1234",
                          "name": "Cultuurbon 6 euro",
                          "price": 1.5
                        },
                        "uitpasNumber": "0560002524314",
                        "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002"
                      }
                    ]
                  },
                  "Multiple ticket sales example": {
                    "value": [
                      {
                        "id": 21345,
                        "tariff": {
                          "id": "COUPON1234",
                          "name": "Cultuurbon 6 euro",
                          "price": 4
                        },
                        "uitpasNumber": "0560002524314",
                        "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002"
                      },
                      {
                        "id": 21346,
                        "tariff": {
                          "id": "SOCIALTARIFF",
                          "name": "Kansentarief",
                          "price": 1.5
                        },
                        "uitpasNumber": "0940002524123",
                        "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/social-tariff-expired\n* https://api.publiq.be/probs/uitpas/maximum-reached\n\nThe type indicates the error on one of the failed ticket sale registrations. All other ticket sale registration in the request will be rolled back in case of an error.\n\nThe property `jsonPointer` will a referene to the erroneous `TicketSaleRequest` object if applicable.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Social tariff discount expired": {
                    "value": {
                      "type": "https://api.publiq.be/probs/uitpas/social-tariff-discount-expired",
                      "title": "Social tariff discount expired",
                      "status": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "description": "Registers one or more new ticket sales **with a discounted UiTPAS tariff**, so the UiTPAS organiser can get reimbursed for the discount.\n\nBefore you can register a discounted ticket sale, you will need to request the possible discounted tariffs from the `GET /tariffs` endpoint and let your end user pick one of the available tariffs. Afterward, you can register a ticket sale using this endpoint. \n\nYou will need:\n\n- The `uitpasNumber` of the passholder buying the ticket.\n- The `eventId` of the UiTdatabank event.\n- The chosen `uitpasTariffId` from the `GET /tariffs` request.\n- The `regularPrice` the passholder would normally have to pay for this ticket\n\nOptionally you can include a `regularPriceLabel` describing the regular price if you have multiple price categories, which can be useful in the financial reporting overview.\n\n<!-- theme: warning -->\n\n> ##### Error handling\n> **If one of the ticket sales is invalid** (for example the chosen tariff is incorrect or expired), **none of the ticket sales will be registered**. You will instead get an error response with more details about the problem, and can then retry the registration without the incorrect ticket sales or ask the end user to change the tickets and/or tariffs that they want.\n\nThe caller of this request must have `TICKETSALE_REGISTER` permission for the organizer of the given event.",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TicketSaleRequest"
                }
              },
              "examples": {
                "Example for one ticket sale": {
                  "value": [
                    {
                      "uitpasNumber": "0560002524314",
                      "tariffId": "COUPON1234",
                      "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002",
                      "regularPrice": 10,
                      "regularPriceLabel": "Optional descriptive label of the regular price. Used in financial reporting."
                    }
                  ]
                },
                "Example for multiple ticket sales": {
                  "value": [
                    {
                      "uitpasNumber": "0560002524314",
                      "tariffId": "COUPON1234",
                      "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002",
                      "regularPrice": 10,
                      "regularPriceLabel": "Base tariff"
                    },
                    {
                      "uitpasNumber": "0930002523422",
                      "tariffId": "SOCIALTARIFF",
                      "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002",
                      "regularPrice": 10,
                      "regularPriceLabel": "Base tariff"
                    }
                  ]
                }
              }
            }
          },
          "description": ""
        }
      }
    },
    "/ticket-sales/{ticketSaleId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "ticketSaleId",
          "in": "path",
          "required": true,
          "description": "Id of the previously registered ticket sale"
        }
      ],
      "delete": {
        "summary": "Cancel a ticket sale registration",
        "operationId": "delete-ticket-sales",
        "responses": {
          "204": {
            "description": "No content. The ticket sale was successfully canceled."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Ticket Sale not found": {
                    "value": {
                      "type": "https://api.publiq.be/probs/uitpas/ticket-sale-not-found",
                      "title": "Ticket sale not found",
                      "status": 404
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Cancels a single ticket sale registration by its id. (Returned in the response of the ticket sale registration request.)",
        "tags": [
          "Ticket sales"
        ],
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ]
      }
    },
    "/permissions": {
      "get": {
        "summary": "Get permissions",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizerPermissions"
                  }
                },
                "examples": {
                  "Example with multiple organizers": {
                    "value": [
                      {
                        "organizer": {
                          "id": "c097fa2e-d9be-42e6-b41a-ec3d4d4cbad1",
                          "name": "CC De Werf"
                        }
                      },
                      {
                        "organizer": {
                          "id": "fd7e6177-4add-4fa8-a7fe-6e60127bfb35",
                          "name": "CC De Schakel"
                        }
                      }
                    ]
                  },
                  "Example with one organizer": {
                    "value": [
                      {
                        "organizer": {
                          "id": "c097fa2e-d9be-42e6-b41a-ec3d4d4cbad1",
                          "name": "CC De Werf"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "operationId": "get-permissions",
        "description": "Lists the organizers that the current user or client (depending on the token) has access to. The possible permissions on each organizer can also differ (will be added later).",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "tags": [
          "Permissions"
        ]
      },
      "parameters": []
    },
    "/events/{eventId}/card-systems": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "eventId",
          "in": "path",
          "required": true,
          "description": "The id of the event"
        }
      ],
      "put": {
        "summary": "Update event card systems",
        "operationId": "put-events-card-systems",
        "responses": {
          "204": {
            "description": "EventCardSytems updated. No content."
          },
          "400": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/invalid-card-system\n* https://api.publiq.be/probs/uitpas/cardsystem-not-found\n* https://api.publiq.be/probs/uitpas/distributionkey-not-found\n* https://api.publiq.be/probs/uitpas/invalid-distributionkey\n* https://api.publiq.be/probs/uitpas/event-already-has-ticketsales\n\nThe detail property might include more information for the client developer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/event-not-found\n\nThe detail property might include more information for the client developer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "List of all possible (enabled and disabled) EventCardSystem objects",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventCardSystem"
                }
              },
              "examples": {
                "Example": {
                  "value": [
                    {
                      "id": 1,
                      "enabled": true,
                      "manualDistributionKeys": [
                        {
                          "id": 123,
                          "enabled": true
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "enabled": false
                    }
                  ]
                }
              }
            }
          },
          "description": ""
        },
        "description": "Update the `EventCardSystem` objects of the given event.\n\nThe `EventCardSystem` object specifies that the event is available in\nthis specific card system and optionally what manual distribution keys are enabled.\n\nThis update is used to toggle the `enabled` state for specific card systems or distribution keys.\n\nTo update the `enabled` state, you MUST retrieve the possible `EventCardSystem` objects first using  `GET /events/{eventId}/card-systems`. \nNote that you can reuse the response from the `GET` request, \naltering the `enabled` state, or you can also omit the name properties. \nOnly the required fields are used in this update request.\n\n<!-- theme: warning -->\n\n> **This endpoint is only needed for exceptional cases.** In most cases card systems and distribution keys are set automatically on events, so you don't need to retrieve or change them.\n\nThe caller of this request must have `EVENTS_UPDATE` permission for the organizer of this event.\n",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "tags": [
          "Events"
        ]
      },
      "get": {
        "summary": "Get event card systems",
        "operationId": "get-events-card-systems",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventCardSystem"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "id": 1,
                        "name": "UiTPAS Dender",
                        "enabled": true,
                        "manualDistributionKeys": [
                          {
                            "id": 123,
                            "name": "3 euro per dag",
                            "enabled": true
                          }
                        ]
                      },
                      {
                        "id": 8,
                        "name": "UiTPAS Gent",
                        "enabled": true
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/event-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "description": "Get all (enabled and disabled) `EventCardSystem` objects of the given event.\n\nThe `EventCardSystem` object specifies that the event is available in\nthis specific card system and optionally what manual distribution keys are enabled.\n\nEvery `EventCardSystem` or `ManualDistributionKey` has an `enabled` property that can be altered using `PUT /events/{eventId}/card-systems`.\n \n<!-- theme: warning -->\n\n> **This endpoint is only needed for exceptional cases.** In most cases card systems and distribution keys are set automatically on events, so you don't need to retrieve or change them.\n\nThe caller of this request must have `EVENTS_READ` permission for the organizer of this event.\n",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/organizers": {
      "get": {
        "summary": "Get organizers",
        "tags": [
          "Organizers"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizersPaginatedResponse"
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/group-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "operationId": "get-organizers",
        "description": "Retrieve organizers based on search parameters.\n\nThe caller of this request must have `ORGANIZER_SEARCH` permission for the given organizer.",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "groupId",
            "description": "Include only organizers in this group"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "name",
            "description": "Include only organizers with this name (* wildcard allowed)"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "start"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 20
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sort[name]"
          }
        ]
      }
    },
    "/passholders": {
      "get": {
        "summary": "Search passholders",
        "tags": [
          "Passholders"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PassholdersPaginatedResponse"
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/organizer-not-found\n* https://api.publiq.be/probs/uitpas/invalid-uitpas-number\n* https://api.publiq.be/probs/uitpas/invalid-insz-number\n* https://api.publiq.be/probs/uitpas/school-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "operationId": "get-passholders",
        "description": "Retrieve passholders based on search parameters.\n\nThe caller of this request must have `PASSHOLDER_SEARCH` permission.",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "inszNumber"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "uitpasNumber"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "name"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "firstName"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "schoolId",
            "description": "Filter passholders that are member of this school (organizerId of the school). Use * to filter passholders that are linked to any school."
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "start"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 20
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sort[name]"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "organizerId",
            "description": "Filter passholders based on the card systems of the give organizer. If omitted, the results will be fitered based on the organizers you have permission to."
          }
        ]
      }
    },
    "/passholders/{passholderId}/school": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "passholderId",
          "in": "path",
          "required": true,
          "description": "The id of the passholder"
        }
      ],
      "get": {
        "summary": "Get passholder school",
        "operationId": "get-passholders-school",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organizer"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "9c47936c-bdee-11eb-8529-0242ac130003"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not found. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/passholder-not-found\n* https://api.publiq.be/probs/uitpas/school-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "description": "Retrieve the passholder's school.\n\nThe caller of this request must have `PASSHOLDER_SEARCH` permission.\n\n<!-- theme: warning -->\n\n> Passholder schools are used to manage passholders in a very specific case. If you are not explicitly working with UiTPAS schools, you will probably **NOT** need this API. \n\nUsing [GET](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/get), [PUT](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/put) and [DELETE](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/delete) on this endpoint, the school of a passholder can be retrieved, updated and deleted. All schools are organizers.",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "tags": [
          "Schools"
        ]
      },
      "put": {
        "summary": "Update passholder school",
        "operationId": "put-passholders-school",
        "responses": {
          "204": {
            "description": "No Content. Update succeeded."
          },
          "400": {
            "description": "Bad request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/school-not-found\n* https://api.publiq.be/probs/uitpas/action-failed\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not found. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/passholder-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "description": "Update the passholder's school relation.\n\nThe caller of this request must have `PASSHOLDER_UPDATE` permission.\n\n<!-- theme: warning -->\n\n> Passholder schools are used to manage passholders in a very specific case. If you are not explicitly working with UiTPAS schools, you will probably **NOT** need this API. \n\nUsing [GET](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/get), [PUT](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/put) and [DELETE](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/delete) on this endpoint, the school of a passholder can be retrieved, updated and deleted. All schools are organizers.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organizer"
              }
            }
          },
          "description": "The Organizer object representing the school, with at least the id present. Name will be ignored."
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "tags": [
          "Schools"
        ]
      },
      "delete": {
        "summary": "Delete passholder school",
        "operationId": "delete-passholders-school",
        "responses": {
          "204": {
            "description": "No Content. Delete succeeded."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not found. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/passholder-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "description": "Delete the passholder's school relation.\n\nThe user or client performing this request must have `PASSHOLDER_UPDATE` permission.\n\n<!-- theme: warning -->\n\n> Passholder schools are used to manage passholders in a very specific case. If you are not explicitly working with UiTPAS schools, you will probably **NOT** need this API. \n\nUsing [GET](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/get), [PUT](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/put) and [DELETE](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/delete) on this endpoint, the school of a passholder can be retrieved, updated and deleted. All schools are organizers.",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "tags": [
          "Schools"
        ]
      }
    },
    "/organizers/{organizerId}/financial-reports/periods": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizerId",
          "in": "path",
          "required": true,
          "description": "The id of the organizer"
        }
      ],
      "get": {
        "summary": "Get suggested financial report periods",
        "tags": [
          "Financial reports"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportPeriod"
                  }
                },
                "examples": {
                  "example-1": {
                    "value": [
                      {
                        "startDate": "2019-08-24",
                        "endDate": "2019-08-24"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/organizer-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "get-organizers-financial-reports-periods",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "description": "Retrieve suggested report periods for an organizer.\n\nThe caller of this request must have `ORGANIZER_REPORTS` permission for the given organizer.\n"
      }
    },
    "/organizers/{organizerId}/financial-reports": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizerId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Start an export of a financial report",
        "operationId": "post-organizers-financial-reports",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                },
                "examples": {
                  "Example of started export": {
                    "value": {
                      "status": "STARTED",
                      "id": 232432
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/organizer-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Financial reports"
        ],
        "description": "Starts a financial report export. The result of this request is a `reportId` that can be used to request the status of the report export and the download.\n\nThe caller of this request must have `ORGANIZER_REPORTS` permission for the given organizer.\n",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportPeriod"
              },
              "examples": {
                "Example": {
                  "value": {
                    "startDate": "2019-07-01",
                    "endDate": "2019-09-30"
                  }
                }
              }
            }
          },
          "description": "The period for which to generate the financial report. \nThe `ReportPeriod` object can be retrieved using `GET /organizers/{organizerId}/financial-reports/periods` or the `startDate` and `endDate` can be customized."
        }
      },
      "get": {
        "summary": "Get financial report exports",
        "operationId": "get-organizers-financial-reports",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "status": "STARTED",
                        "id": 0,
                        "message": "string",
                        "period": {
                          "startDate": "2019-08-24",
                          "endDate": "2019-08-24"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/organizer-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "description": "Get previously exported financial reports. \n\n> Note: Reports will only be available for a limited amount of time. When they become unavailable, a new export can be requested using `POST /organizers/{organizerId}/financial-reports`  \n\n\nThe caller of this request must have `ORGANIZER_REPORTS` permission for the given organizer.\n",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "tags": [
          "Financial reports"
        ]
      }
    },
    "/organizers/{organizerId}/financial-reports/{reportId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizerId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "integer"
          },
          "name": "reportId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get financial report status",
        "tags": [
          "Financial reports"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                },
                "examples": {
                  "Example of a started report": {
                    "value": {
                      "id": 23243,
                      "status": "STARTED"
                    }
                  },
                  "Example of an available report": {
                    "value": {
                      "id": 23244,
                      "status": "AVAILABLE"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/organizer-not-found\n* https://api.publiq.be/probs/uitpas/report-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "get-organizers-financial-reports-reportId",
        "description": "Retrieve the status of a previously started report export.\n\nThe caller of this request must have `ORGANIZER_REPORTS` permission for the given organizer.\n",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ]
      }
    },
    "/organizers/{organizerId}/financial-reports/{reportId}.zip": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizerId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "integer"
          },
          "name": "reportId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Download financial report",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/x-zip-compressed": {
                "schema": {},
                "examples": {}
              }
            },
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string",
                  "example": "attachment; filename=\"financialOverview_organizerX_20210526_1512.zip\""
                },
                "description": "Header indicating that this response should be handled as a separate file download"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/organizer-not-found\n* https://api.publiq.be/probs/uitpas/report-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {}
              }
            }
          }
        },
        "operationId": "get-organizers-financial-reports-reportId-zip",
        "description": "Retrieve the actual report zip file of an `available` report.\n\nThe caller of this request must have `ORGANIZER_REPORTS` permission for the given organizer.\n",
        "tags": [
          "Financial reports"
        ],
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Tariff": {
        "title": "Tariff",
        "type": "object",
        "description": "The Tariff describes the discounted price a passholder has to pay for a given ticket. ",
        "x-internal": false,
        "x-examples": {},
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string"
          },
          "price": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "name",
          "price"
        ],
        "x-tags": [
          "Models"
        ]
      },
      "TicketSaleRegistration": {
        "title": "TicketSaleRegistration",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "tariff": {
            "$ref": "#/components/schemas/Tariff"
          },
          "uitpasNumber": {
            "type": "string"
          },
          "eventId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "tariff",
          "uitpasNumber",
          "eventId"
        ],
        "x-examples": {
          "Example": {
            "id": 21345,
            "tariff": {
              "id": "COUPON1234",
              "name": "Cultuurbon 6 euro",
              "price": 1.5
            },
            "uitpasNumber": "0560002524314",
            "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002"
          }
        },
        "description": "The TicketSaleRegistration is a response object of the POST /ticketSales request. It can be used to provide the user with an overview or to identify the ticket sales in case they need to be canceled.",
        "x-internal": false,
        "x-tags": [
          "Models"
        ]
      },
      "TicketSaleRequest": {
        "title": "TicketSaleRequest",
        "type": "object",
        "description": "The TicketSaleRequest is a request object used to register ticket sales in POST /ticketSales.",
        "x-examples": {
          "Example ticket sale request": {
            "uitpasNumber": "0560002524314",
            "tariffId": "COUPON1234",
            "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002",
            "regularPrice": 10,
            "regularPriceLabel": "Optional descriptive label of the regular price. Used in financial reporting."
          }
        },
        "properties": {
          "uitpasNumber": {
            "type": "string"
          },
          "tariffId": {
            "type": "string"
          },
          "eventId": {
            "type": "string"
          },
          "regularPrice": {
            "type": "number"
          },
          "regularPriceLabel": {
            "type": "string",
            "description": "Optional descriptive label of the regular price. Used in financial reporting."
          }
        },
        "required": [
          "uitpasNumber",
          "tariffId",
          "eventId",
          "regularPrice"
        ],
        "x-internal": false,
        "x-tags": [
          "Models"
        ]
      },
      "Error": {
        "title": "Error",
        "type": "object",
        "description": "RFC7807 error model for all publiq APIs",
        "x-tags": [
          "Models"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "A URI reference that identifies the problem type."
          },
          "title": {
            "type": "string",
            "description": "A short, human-readable summary of the problem type."
          },
          "status": {
            "type": "integer",
            "description": "The HTTP status code."
          },
          "jsonPointer": {
            "type": "string",
            "description": "Pointer to the erroneous request object in JavaScript Object Notation (JSON) Pointer format.",
            "format": "json-pointer"
          },
          "detail": {
            "type": "string",
            "description": "A human-readable explanation specific to this occurrence of the problem. "
          }
        },
        "required": [
          "type",
          "title",
          "status"
        ]
      },
      "OrganizerPermissions": {
        "title": "OrganizerPermissions",
        "type": "object",
        "x-tags": [
          "Models"
        ],
        "properties": {
          "organizer": {
            "$ref": "#/components/schemas/Organizer"
          }
        },
        "required": [
          "organizer"
        ]
      },
      "Organizer": {
        "title": "Organizer",
        "type": "object",
        "x-tags": [
          "Models"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "PassholdersPaginatedResponse": {
        "title": "PassholdersPaginatedResponse",
        "type": "object",
        "x-tags": [
          "Models"
        ],
        "description": "Paginated response object for passholders",
        "properties": {
          "totalItems": {
            "type": "integer"
          },
          "member": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Passholder"
            }
          }
        }
      },
      "OrganizersPaginatedResponse": {
        "title": "OrganizersPaginatedResponse",
        "type": "object",
        "x-tags": [
          "Models"
        ],
        "description": "Paginated response object for organizers",
        "properties": {
          "totalItems": {
            "type": "integer"
          },
          "member": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organizer"
            }
          }
        }
      },
      "Passholder": {
        "title": "Passholder",
        "type": "object",
        "x-tags": [
          "Models"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "inszNumber": {
            "type": "string"
          },
          "cardSystemMemberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardSystemMembership"
            }
          },
          "email": {
            "type": "string"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CardSystemMembership": {
        "title": "CardSystemMembership",
        "type": "object",
        "x-tags": [
          "Models"
        ],
        "properties": {
          "cardSystem": {
            "$ref": "#/components/schemas/CardSystem"
          },
          "uitpasNumber": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "BLOCKED"
            ]
          },
          "socialTariff": {
            "type": "object",
            "properties": {
              "endDate": {
                "type": "string",
                "format": "date-time"
              },
              "inGracePeriod": {
                "type": "boolean"
              },
              "expired": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "CardSystem": {
        "title": "CardSystem",
        "type": "object",
        "x-tags": [
          "Models"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "Report": {
        "type": "object",
        "title": "Report",
        "description": "The status of a started report export.",
        "x-examples": {},
        "x-tags": [
          "Models"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "STARTED",
              "AVAILABLE",
              "FAILED"
            ]
          },
          "id": {
            "type": "integer"
          },
          "message": {
            "type": "string",
            "description": "Optional message describing why the report failed."
          },
          "period": {
            "$ref": "#/components/schemas/ReportPeriod"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "status",
          "id"
        ]
      },
      "ReportPeriod": {
        "title": "ReportPeriod",
        "type": "object",
        "description": "Start and end date of the reporting period  ",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "startDate",
          "endDate"
        ],
        "x-tags": [
          "Models"
        ]
      },
      "EventCardSystem": {
        "title": "EventCardSystem",
        "type": "object",
        "x-examples": {
          "Example": {
            "id": 1,
            "name": "UiTPAS Dender",
            "enabled": true,
            "manualDistributionKeys": [
              {
                "id": 123,
                "name": "€1,5 halve dag",
                "enabled": true
              }
            ]
          }
        },
        "x-tags": [
          "Models"
        ],
        "description": "CardSystem in an event context, optionally including manual distributionKeys.\n\nThis model is only used in the GET and PUT `/events/{eventId}/card-systems` to configure the card systems and distribution keys for an event.\n\n<!-- theme: warning -->\n\n> **This model and corresponding endpoints are only needed for exceptional cases.** In most cases card systems and distribution keys are set automatically on events, so you don't need to retrieve or change them.\n",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the card system"
          },
          "name": {
            "type": "string",
            "description": "Name of the card system"
          },
          "enabled": {
            "type": "boolean",
            "description": "State of this card system for the event."
          },
          "manualDistributionKeys": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Manual distribution key",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean",
                  "description": "State of this manual distribution key in the card system for the event."
                }
              },
              "required": [
                "id",
                "enabled"
              ]
            }
          }
        },
        "required": [
          "id",
          "enabled"
        ]
      }
    },
    "securitySchemes": {
      "USER_ACCESS_TOKEN": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "",
            "tokenUrl": "",
            "refreshUrl": "",
            "scopes": {
              "https://api.publiq.be/auth/uitpas": "Grants access to the UiTPAS API"
            }
          }
        },
        "description": "See [Authentication docs](https://publiq.stoplight.io/docs/authentication/docs/user-access-token.md)"
      },
      "CLIENT_ACCESS_TOKEN": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "",
            "refreshUrl": "",
            "scopes": {
              "https://api.publiq.be/auth/uitpas": "Grants access to the UiTPAS API"
            }
          }
        },
        "description": "See [Authentication docs](https://publiq.stoplight.io/docs/authentication/docs/client-access-token.md)"
      }
    },
    "parameters": {},
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized. Your request is missing the required credentials to authenticate. See the Authentication documentation for more info.\n\n* type: https://api.publiq.be/probs/auth/unauthorized\n* detail: might contain a developer-readable explanation of the reason",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "Unauthorized": {
                "value": {
                  "type": "https://api.publiq.be/probs/auth/unauthorized",
                  "title": "Unauthorized",
                  "status": 401
                }
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden. Your request was successfully authenticated but you do not have permission to perform this particular request.\n\n* type: https://api.publiq.be/probs/auth/forbidden\n* detail: might contain a developer-readable explanation of the reason",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "Forbidden": {
                "value": {
                  "type": "https://api.publiq.be/probs/auth/forbidden",
                  "title": "Forbidden",
                  "status": 403,
                  "detail": "user must be admin of organiser abcd1234"
                }
              }
            }
          }
        }
      }
    }
  }
}