{
  "openapi": "3.0.0",
  "info": {
    "title": "UiTPAS API",
    "version": "2.0",
    "contact": {
      "name": "publiq helpdesk",
      "email": "vragen@publiq.be"
    },
    "description": "With UiTPAS API 2.0 you can retrieve ticket sale prices for specific UiTPAS numbers, and register ticket sales for specific UiTPAS numbers.\n\nFuture versions will also include support for more features like saving points and exchanging them for benefits.\n\n## Postman\n\n<!-- focus: false -->\n\n[![Download postman collection](https://postman.publiq.be/postman-download.svg)](https://postman.publiq.be/?api=uitpas-api)\n\nDo you already have a **client id** and **client secret**?\nDownload a personalized Postman collection to start making requests in seconds!"
  },
  "servers": [
    {
      "url": "https://api-test.uitpas.be",
      "description": "Testing"
    },
    {
      "url": "https://api.uitpas.be",
      "description": "Production"
    }
  ],
  "tags": [
    {
      "name": "Events"
    },
    {
      "name": "Financial reports"
    },
    {
      "name": "Organizers"
    },
    {
      "name": "Passholders"
    },
    {
      "name": "Permissions"
    },
    {
      "name": "Schools"
    },
    {
      "name": "Ticket sales"
    },
    {
      "name": "UiTID"
    }
  ],
  "paths": {
    "/tariffs": {
      "parameters": [],
      "get": {
        "summary": "Get tariffs",
        "tags": [
          "Ticket sales"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TariffsResponse"
                },
                "examples": {
                  "Single tariff example": {
                    "value": {
                      "available": [
                        {
                          "id": "SOCIALTARIFF",
                          "name": "Kansentarief",
                          "price": 1.5,
                          "type": "SOCIALTARIFF",
                          "remaining": 1
                        }
                      ]
                    }
                  },
                  "Multiple tariffs example": {
                    "value": {
                      "available": [
                        {
                          "id": "SOCIALTARIFF",
                          "name": "Kansentarief",
                          "price": 1.5,
                          "remaining": 1,
                          "type": "SOCIALTARIFF"
                        },
                        {
                          "id": "COUPON1234",
                          "name": "Cultuurbon 6 euro",
                          "price": 4,
                          "remaining": 1,
                          "type": "COUPON"
                        },
                        {
                          "id": "COUPON2345",
                          "name": "2 euro korting op een specifiek event",
                          "price": 8,
                          "remaining": 1,
                          "type": "COUPON"
                        }
                      ]
                    }
                  },
                  "Single tariff with multiple number of tickets": {
                    "value": {
                      "available": [
                        {
                          "id": "SOCIALTARIFF",
                          "name": "Kansentarief",
                          "price": 1.5,
                          "remaining": 20,
                          "type": "SOCIALTARIFF"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. The response will include a JSON body with more details in the form of a RFC7807 error model. Possible error types:\n\n* https://api.publiq.be/probs/uitpas/event-not-found\n* https://api.publiq.be/probs/uitpas/passholder-not-found\n* https://api.publiq.be/probs/uitpas/passholder-no-active-cardsystems\n* https://api.publiq.be/probs/uitpas/social-tariff-expired\n* https://api.publiq.be/probs/uitpas/invalid-uitpasnumber\n* https://api.publiq.be/probs/uitpas/invalid-card\n* https://api.publiq.be/probs/uitpas/invalid-card-status\n\n",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Event not found": {
                    "value": {
                      "type": "https://api.publiq.be/probs/uitpas/event-not-found",
                      "title": "Event id 267B6FCF-46F8-4DA2-8D7D-AADCD2C2715E not found",
                      "status": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "operationId": "get-tariffs",
        "description": "Returns the possible UiTPAS discounted **tariffs for an event and a passholder**.\n\nThis UiTPAS tariffs are calculated based on:\n\n- **The regular price** of the ticket.\nThis is the price your user would have to pay for the specific ticket without UiTPAS discount.\n- **The UiTPAS number** of the passholder. UiTPAS discounts are personal so it's important to identify the passholder to retrieve a list of possible tariffs.\n- **The event id** of the UiTdatabank event. UiTPAS discounts are limited to specific UiTdatabank events, so it's important to specify the event id to retrieve a list of possible tariffs.\n\n> ##### Important\n> The regular price of the ticket should generally be one of the price categories set on the event in UiTdatabank to make financial reporting clearer.\n\nThe caller of this request must have `TICKETSALE_REGISTER` permission for the organizer of the given event.",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "number"
            },
            "in": "query",
            "name": "regularPrice",
            "description": "The regular price the passholder would have to pay for the ticket if they are not eligible for discounts",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "eventId",
            "description": "The id of the event for which the ticket is sold",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "uitpasNumber",
            "description": "UiTPAS Number identifying the passholder who wants to buy a ticket",
            "required": true
          }
        ]
      }
    },
    "/ticket-sales": {
      "parameters": [],
      "post": {
        "summary": "Register ticket sale(s)",
        "tags": [
          "Ticket sales"
        ],
        "operationId": "post-ticket-sales",
        "responses": {
          "200": {
            "description": "Ticket sale registration(s) succeeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TicketSale"
                  }
                },
                "examples": {
                  "Single ticket sale example": {
                    "value": [
                      {
                        "id": "21345",
                        "tariff": {
                          "id": "COUPON1234",
                          "name": "Cultuurbon 6 euro",
                          "price": 1.5,
                          "type": "COUPON"
                        },
                        "uitpasNumber": "0560002524314",
                        "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002",
                        "regularPrice": 10,
                        "regularPriceLabel": "Optional descriptive label of the regular price. Used in financial reporting.",
                        "passholder": {
                          "id": "string",
                          "name": "string",
                          "firstName": "string",
                          "inszNumber": "string",
                          "dateOfBirth": "2000-01-01",
                          "postalCode": "9300",
                          "registrationOrganizer": {
                            "id": "1234",
                            "name": "Example UiTPAS Organizer"
                          },
                          "cardSystemMemberships": [
                            {
                              "cardSystem": {
                                "id": 1,
                                "name": "UiTPAS Dender"
                              },
                              "uitpasNumber": "0560002524314",
                              "status": "ACTIVE",
                              "socialTariff": {
                                "endDate": "2022-08-24T14:15:22Z",
                                "inGracePeriod": false,
                                "expired": false
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "Multiple ticket sales example": {
                    "value": [
                      {
                        "id": "21345",
                        "tariff": {
                          "id": "COUPON1234",
                          "name": "Cultuurbon 6 euro",
                          "price": 4,
                          "type": "COUPON"
                        },
                        "uitpasNumber": "0560002524314",
                        "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002",
                        "regularPrice": 10,
                        "regularPriceLabel": "Optional descriptive label of the regular price. Used in financial reporting.",
                        "passholder": {
                          "id": "string",
                          "name": "string",
                          "firstName": "string",
                          "inszNumber": "string",
                          "dateOfBirth": "2000-01-01",
                          "postalCode": "9300",
                          "registrationOrganizer": {
                            "id": "1234",
                            "name": "Example UiTPAS Organizer"
                          },
                          "cardSystemMemberships": [
                            {
                              "cardSystem": {
                                "id": 1,
                                "name": "UiTPAS Dender"
                              },
                              "uitpasNumber": "0560002524314",
                              "status": "ACTIVE",
                              "socialTariff": {
                                "endDate": "2022-08-24T14:15:22Z",
                                "inGracePeriod": false,
                                "expired": false
                              }
                            }
                          ]
                        }
                      },
                      {
                        "id": "21346",
                        "tariff": {
                          "id": "SOCIALTARIFF",
                          "name": "Kansentarief",
                          "price": 1.5,
                          "type": "SOCIALTARIFF"
                        },
                        "uitpasNumber": "0940002524123",
                        "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002",
                        "regularPrice": 10,
                        "regularPriceLabel": "Optional descriptive label of the regular price. Used in financial reporting.",
                        "passholder": {
                          "id": "string",
                          "name": "string",
                          "firstName": "string",
                          "inszNumber": "string",
                          "dateOfBirth": "2000-01-01",
                          "postalCode": "9300",
                          "registrationOrganizer": {
                            "id": "1234",
                            "name": "Example UiTPAS Organizer"
                          },
                          "cardSystemMemberships": [
                            {
                              "cardSystem": {
                                "id": 1,
                                "name": "UiTPAS Dender"
                              },
                              "uitpasNumber": "0940002524123",
                              "status": "ACTIVE",
                              "socialTariff": {
                                "endDate": "2022-08-24T14:15:22Z",
                                "inGracePeriod": false,
                                "expired": false
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/social-tariff-expired\n* https://api.publiq.be/probs/uitpas/maximum-reached\n* https://api.publiq.be/probs/uitpas/invalid-number-of-tickets\n* https://api.publiq.be/probs/uitpas/event-not-found\n* https://api.publiq.be/probs/uitpas/passholder-not-found\n* https://api.publiq.be/probs/uitpas/invalid-uitpasnumber\n* https://api.publiq.be/probs/uitpas/invalid-card\n* https://api.publiq.be/probs/uitpas/invalid-card-status\n* https://api.publiq.be/probs/uitpas/passholder-no-active-cardsystems\n* https://api.publiq.be/probs/uitpas/invalid-coupon\n\n\nThe type indicates the error on one of the failed ticket sale registrations. All other ticket sale registration in the request will be rolled back in case of an error.\n\nThe property `jsonPointer` will a referene to the erroneous `TicketSaleRequest` object if applicable.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Social tariff discount expired": {
                    "value": {
                      "type": "https://api.publiq.be/probs/uitpas/social-tariff-discount-expired",
                      "title": "Social tariff discount expired",
                      "status": 400
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "description": "Registers one or more new ticket sales **with a discounted UiTPAS tariff**, so the UiTPAS organiser can get reimbursed for the discount.\n\nBefore you can register a discounted ticket sale, you will need to request the possible discounted tariffs from the `GET /tariffs` endpoint and let your end user pick one of the available tariffs. Afterward, you can register a ticket sale using this endpoint. \n\nYou will need:\n\n- The `uitpasNumber` of the passholder buying the ticket.\n- The `eventId` of the UiTdatabank event.\n- The chosen `tariff` from the `GET /tariffs` request. (only the `id` is required)\n- The `regularPrice` the passholder would normally have to pay for this ticket\n\nOptionally you can include:\n- a `regularPriceLabel` describing the regular price if you have multiple price \ncategories, which can be useful in the financial reporting overview.\n\nIf you want to register more than one ticket sale for the same passholder, for the same event, at the same tariff, use multiple `TicketSale` objects in this request. Do note this is only possible if `remaining` was higher than one in the `GET /tariffs` request.\n\nThe `passholder` field of `TicketSale` is ignored in the request body. It is included in the response if applicable (passholder can be empty in some cases, e.g. for group passes), but only if the caller of this request has `PASSHOLDER_SEARCH` permission.\n\n<!-- theme: warning -->\n\n> ##### Error handling\n> **If one of the ticket sales is invalid** (for example the chosen tariff is incorrect or expired), **none of the ticket sales will be registered**. You will instead get an error response with more details about the problem, and can then retry the registration without the incorrect ticket sales or ask the end user to change the tickets and/or tariffs that they want.\n\nThe caller of this request must have `TICKETSALE_REGISTER`  permission for the organizer of the given event.\n",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TicketSale"
                }
              },
              "examples": {
                "Example for one ticket sale": {
                  "value": [
                    {
                      "tariff": {
                        "id": "COUPON1234"
                      },
                      "uitpasNumber": "0560002524314",
                      "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002",
                      "regularPrice": 10,
                      "regularPriceLabel": "Optional descriptive label of the regular price. Used in financial reporting."
                    }
                  ]
                },
                "Example for multiple ticket sales": {
                  "value": [
                    {
                      "tariff": {
                        "id": "COUPON1234"
                      },
                      "uitpasNumber": "0560002524314",
                      "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002",
                      "regularPrice": 10,
                      "regularPriceLabel": "Base tariff"
                    },
                    {
                      "tariff": {
                        "id": "SOCIALTARIFF"
                      },
                      "uitpasNumber": "0930002523422",
                      "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002",
                      "regularPrice": 10,
                      "regularPriceLabel": "Base tariff"
                    }
                  ]
                },
                "Example for multiple ticket sales at the same tariff": {
                  "value": [
                    {
                      "uitpasNumber": "0560002524314",
                      "tariff": {
                        "id": "SOCIALTARIFF"
                      },
                      "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002",
                      "regularPrice": 10,
                      "regularPriceLabel": "Optional descriptive label of the regular price. Used in financial reporting.",
                      "numberOfTickets": 5
                    }
                  ]
                }
              }
            }
          },
          "description": ""
        }
      },
      "get": {
        "summary": "Retrieve existing ticket sales",
        "tags": [
          "Ticket sales"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketSalesPaginatedResponse"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "totalItems": 2,
                      "member": [
                        {
                          "id": "21345",
                          "tariff": {
                            "id": "COUPON1234",
                            "name": "Cultuurbon 6 euro",
                            "price": 4,
                            "type": "COUPON"
                          },
                          "uitpasNumber": "0560002524314",
                          "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002",
                          "regularPrice": 10,
                          "regularPriceLabel": "Optional descriptive label of the regular price. Used in financial reporting.",
                          "passholder": {
                            "id": "string",
                            "name": "string",
                            "firstName": "string",
                            "inszNumber": "string",
                            "dateOfBirth": "2000-01-01",
                            "postalCode": "9300",
                            "registrationOrganizer": {
                              "id": "1234",
                              "name": "Example UiTPAS Organizer"
                            },
                            "cardSystemMemberships": [
                              {
                                "cardSystem": {
                                  "id": 1,
                                  "name": "UiTPAS Dender"
                                },
                                "uitpasNumber": "string",
                                "status": "ACTIVE",
                                "socialTariff": {
                                  "endDate": "2022-08-24T14:15:22Z",
                                  "inGracePeriod": false,
                                  "expired": false
                                }
                              }
                            ]
                          }
                        },
                        {
                          "id": "21346",
                          "tariff": {
                            "id": "COUPON1234",
                            "name": "Cultuurbon 6 euro",
                            "price": 1.5,
                            "type": "COUPON"
                          },
                          "uitpasNumber": "0560002524314",
                          "eventId": "31e926e2-a35f-11eb-bcbc-0242ac130002",
                          "regularPrice": 10,
                          "regularPriceLabel": "Optional descriptive label of the regular price. Used in financial reporting.",
                          "passholder": {
                            "id": "string",
                            "name": "string",
                            "firstName": "string",
                            "inszNumber": "string",
                            "dateOfBirth": "2000-01-01",
                            "postalCode": "9300",
                            "registrationOrganizer": {
                              "id": "1234",
                              "name": "Example UiTPAS Organizer"
                            },
                            "cardSystemMemberships": [
                              {
                                "cardSystem": {
                                  "id": 1,
                                  "name": "UiTPAS Dender"
                                },
                                "uitpasNumber": "string",
                                "status": "ACTIVE",
                                "socialTariff": {
                                  "endDate": "2022-08-24T14:15:22Z",
                                  "inGracePeriod": false,
                                  "expired": false
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "operationId": "get-ticket-sales",
        "description": "Retrieve ticket sales based on search parameters.\n\nThe caller of this request must have `TICKETSALE_SEARCH` permission for the organizer of the given event.\n\nThe `passholder` is included in the response if applicable (passholder can be empty in some cases, e.g. for group passes), and only if the caller of this request has PASSHOLDER_SEARCH permission.",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "eventId",
            "description": "The ID of the UiTdatabank event.",
            "required": true
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "start"
          },
          {
            "schema": {
              "type": "integer",
              "default": 20,
              "minimum": 0
            },
            "in": "query",
            "name": "limit"
          }
        ]
      }
    },
    "/ticket-sales/{ticketSaleId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "ticketSaleId",
          "in": "path",
          "required": true,
          "description": "Id of the previously registered ticket sale"
        }
      ],
      "delete": {
        "summary": "Cancel a ticket sale registration",
        "operationId": "delete-ticket-sales",
        "responses": {
          "204": {
            "description": "No content. The ticket sale was successfully canceled."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Ticket Sale not found": {
                    "value": {
                      "type": "https://api.publiq.be/probs/uitpas/ticket-sale-not-found",
                      "title": "Ticket sale not found",
                      "status": 404
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Cancels a single ticket sale registration by its id. (Returned in the response of the ticket sale registration request.)\n\nThe caller of this request must have `TICKETSALE_REGISTER` permission for the organizer of the event of the ticketsale.",
        "tags": [
          "Ticket sales"
        ],
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ]
      }
    },
    "/permissions": {
      "get": {
        "summary": "Get permissions",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizerPermissions"
                  }
                },
                "examples": {
                  "Example with multiple organizers": {
                    "value": [
                      {
                        "organizer": {
                          "id": "c097fa2e-d9be-42e6-b41a-ec3d4d4cbad1",
                          "name": "CC De Werf"
                        }
                      },
                      {
                        "organizer": {
                          "id": "fd7e6177-4add-4fa8-a7fe-6e60127bfb35",
                          "name": "CC De Schakel"
                        }
                      }
                    ]
                  },
                  "Example with one organizer": {
                    "value": [
                      {
                        "organizer": {
                          "id": "c097fa2e-d9be-42e6-b41a-ec3d4d4cbad1",
                          "name": "CC De Werf"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "operationId": "get-permissions",
        "description": "Lists the organizers that the current user or client (depending on the token) has access to. The possible permissions on each organizer can also differ (will be added later).",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "tags": [
          "Permissions"
        ]
      },
      "parameters": []
    },
    "/events/{eventId}/card-systems": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "eventId",
          "in": "path",
          "required": true,
          "description": "The id of the event"
        }
      ],
      "put": {
        "summary": "Update event card systems",
        "operationId": "put-events-card-systems",
        "responses": {
          "204": {
            "description": "EventCardSytems updated. No content."
          },
          "400": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/invalid-card-system\n* https://api.publiq.be/probs/uitpas/cardsystem-not-found\n* https://api.publiq.be/probs/uitpas/distributionkey-not-found\n* https://api.publiq.be/probs/uitpas/invalid-distributionkey\n* https://api.publiq.be/probs/uitpas/event-already-has-ticketsales\n\nThe detail property might include more information for the client developer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/event-not-found\n\nThe detail property might include more information for the client developer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "List of all possible (enabled and disabled) EventCardSystem objects",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EventCardSystem"
                }
              },
              "examples": {
                "Example": {
                  "value": [
                    {
                      "id": 1,
                      "enabled": true,
                      "manualDistributionKeys": [
                        {
                          "id": 123,
                          "enabled": true
                        }
                      ]
                    },
                    {
                      "id": 8,
                      "enabled": false
                    }
                  ]
                }
              }
            }
          },
          "description": ""
        },
        "description": "Update the `EventCardSystem` objects of the given event.\n\nThe `EventCardSystem` object specifies that the event is available in\nthis specific card system and optionally what manual distribution keys are enabled.\n\nThis update is used to toggle the `enabled` state for specific card systems or distribution keys.\n\nTo update the `enabled` state, you MUST retrieve the possible `EventCardSystem` objects first using  `GET /events/{eventId}/card-systems`. \nNote that you can reuse the response from the `GET` request, \naltering the `enabled` state, or you can also omit the name properties. \nOnly the required fields are used in this update request.\n\n<!-- theme: warning -->\n\n> **This endpoint is only needed for exceptional cases.** In most cases card systems and distribution keys are set automatically on events, so you don't need to retrieve or change them.\n\nThe caller of this request must have `EVENTS_UPDATE` permission for the organizer of this event.\n",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "tags": [
          "Events"
        ]
      },
      "get": {
        "summary": "Get event card systems",
        "operationId": "get-events-card-systems",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventCardSystem"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "id": 1,
                        "name": "UiTPAS Dender",
                        "enabled": true,
                        "manualDistributionKeys": [
                          {
                            "id": 123,
                            "name": "3 euro per dag",
                            "enabled": true
                          }
                        ]
                      },
                      {
                        "id": 8,
                        "name": "UiTPAS Gent",
                        "enabled": true
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/event-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "description": "Get all (enabled and disabled) `EventCardSystem` objects of the given event.\n\nThe `EventCardSystem` object specifies that the event is available in\nthis specific card system and optionally what manual distribution keys are enabled.\n\nEvery `EventCardSystem` or `ManualDistributionKey` has an `enabled` property that can be altered using `PUT /events/{eventId}/card-systems`.\n \n<!-- theme: warning -->\n\n> **This endpoint is only needed for exceptional cases.** In most cases card systems and distribution keys are set automatically on events, so you don't need to retrieve or change them.\n\nThe caller of this request must have `EVENTS_READ` permission for the organizer of this event.\n",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "tags": [
          "Events"
        ]
      }
    },
    "/organizers": {
      "get": {
        "summary": "Get organizers",
        "tags": [
          "Organizers"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizersPaginatedResponse"
                },
                "examples": {}
              }
            }
          },
          "400": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/group-not-found\n* https://api.publiq.be/probs/uitpas/cardsystem-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "operationId": "get-organizers",
        "description": "Retrieve organizers based on search parameters.\n\nThe caller of this request must have `ORGANIZER_SEARCH` permission for the given organizer.",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "groupId",
            "description": "Include only organizers in this group"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "name",
            "description": "Include only organizers with this name (* wildcard allowed)"
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "cardSystemId",
            "description": "Include only organizers linked to this card system"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "start"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 20
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sort[name]"
          }
        ]
      }
    },
    "/passholders": {
      "get": {
        "summary": "Search passholders",
        "tags": [
          "Passholders"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PassholdersPaginatedResponse"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "totalItems": 1,
                      "member": [
                        {
                          "id": "string",
                          "name": "string",
                          "firstName": "string",
                          "inszNumber": "string",
                          "dateOfBirth": "2000-01-01",
                          "postalCode": "9300",
                          "registrationOrganizer": {
                            "id": "1234",
                            "name": "Example UiTPAS Organizer"
                          },
                          "cardSystemMemberships": [
                            {
                              "cardSystem": {
                                "id": 0,
                                "name": "string"
                              },
                              "uitpasNumber": "string",
                              "status": "ACTIVE",
                              "socialTariff": {
                                "endDate": "2019-08-24T14:15:22Z",
                                "inGracePeriod": true,
                                "expired": true
                              }
                            }
                          ],
                          "email": "string",
                          "creationDate": "2019-08-24T14:15:22Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/organizer-not-found\n* https://api.publiq.be/probs/uitpas/invalid-uitpas-number\n* https://api.publiq.be/probs/uitpas/invalid-insz-number\n* https://api.publiq.be/probs/uitpas/school-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "operationId": "get-passholders",
        "description": "Retrieve passholders based on search parameters.\n\nThe caller of this request must have `PASSHOLDER_SEARCH` permission.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "inszNumber"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "uitpasNumber"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "name"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "firstName"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "schoolId",
            "description": "Filter passholders that are member of this school (organizerId of the school). Use * to filter passholders that are linked to any school."
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "start"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 20
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "in": "query",
            "name": "sort[name]"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "organizerId",
            "description": "Filter passholders based on the card systems of the give organizer. If omitted, the results will be fitered based on the organizers you have permission to."
          },
          {
            "schema": {
              "type": "string",
              "format": "date"
            },
            "in": "query",
            "name": "dateOfBirthFrom",
            "description": "Include only passholders with a dateOfBirth of this value (including) or more recent. Format yyyy-mm-dd e.g. 2003-01-01"
          },
          {
            "schema": {
              "type": "string",
              "format": "date"
            },
            "in": "query",
            "name": "dateOfBirthTo",
            "description": "Include only passholders with a dateOfBirth of this value (including) or older. Format yyyy-mm-dd e.g. 2003-01-01"
          }
        ]
      },
      "parameters": []
    },
    "/passholders/me/uitid/registration-token": {
      "parameters": [],
      "get": {
        "summary": "Retrieve UiTID registration token",
        "operationId": "get-uitid-passholder-registration-token",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "UiTPAS number of the validated passholder"
                    }
                  },
                  "required": [
                    "token"
                  ],
                  "readOnly": true
                },
                "examples": {
                  "Example": {
                    "value": {
                      "token": "4f5ac68b-e85a-4c38-ad8c-a07a253ed692"
                    }
                  }
                }
              }
            },
            "description": "OK\n\nThe passholder can proceed UiTID registration."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "description": "Too Many Requests\n\nPossbile error types:\n\n* https://api.publiq.be/probs/uitpas/rate-limited\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "type": "https://api.publiq.be/probs/uitpas/rate-limited",
                      "title": "Rate limited",
                      "status": 429,
                      "detail": "Rate limited"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "This is step 1 of the process to register an UiTPAS passholder in UiTID using their UiTPAS number and date of birth. It is used to retrieve an UiTID registration token for the passholder. If the passholder already has a token via an email they received to register in UiTID, this step can be skipped.\n\nThis endpoint uses HTTP Basic Authentication using:\n* Username: uitpasNumber \n* Password: dateOfBirth in the form yyyy-mm-dd\n\nIn summary, this header should look like: \n\n```\nAuthorization: Basic base64(uitpasNumber+dateOfBirth)\n```\n\nThe response will contain a `token` property that can be used in step 2 of the process, [retrieving the UiTID registration status](/reference/UiTPAS.v2.json/paths/~1passholders~1me~1uitid~1status/get).\n\nThis caller of this method is identified with [client identification](https://docs.publiq.be/docs/authentication/ZG9jOjExODE5NDY5-client-identification) and does not require any permissions, but please note this endpoint is rate-limited on IP address to prevent abuse.",
        "tags": [
          "UiTID"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "name": "Authorization",
            "description": "HTTP Basic auth using uitpasNumber as the username and dateOfBirth as password"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "x-client-id",
            "description": "API key identifying the calling client",
            "required": true
          }
        ]
      }
    },
    "/passholders/me/uitid/status": {
      "parameters": [],
      "get": {
        "summary": "Retrieve UiTID registration status",
        "operationId": "get-uitid-passholder-status",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "uitpasNumber": {
                      "type": "string",
                      "description": "UiTPAS number of the validated passholder"
                    },
                    "email": {
                      "type": "string",
                      "description": "Optionally email address of the validated passholder"
                    },
                    "state": {
                      "type": "string",
                      "enum": [
                        "REGISTERED",
                        "UNREGISTERED"
                      ],
                      "description": "State of the passholder"
                    }
                  },
                  "required": [
                    "uitpasNumber",
                    "state"
                  ],
                  "readOnly": true
                },
                "examples": {
                  "Unregistered passholder without email": {
                    "value": {
                      "state": "UNREGISTERED",
                      "uitpasNumber": "0900000008301"
                    }
                  },
                  "Unregistered passholder including email": {
                    "value": {
                      "state": "UNREGISTERED",
                      "uitpasNumber": "0900000008301",
                      "email": "john@example.org"
                    }
                  },
                  "Registered passholder": {
                    "value": {
                      "state": "REGISTERED",
                      "uitpasNumber": "0900000008301",
                      "email": "john@example.org"
                    }
                  }
                }
              }
            },
            "description": "OK\n\nThe passholder can proceed UiTID registration."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "description": "Too Many Requests\n\nPossbile error types:\n\n* https://api.publiq.be/probs/uitpas/rate-limited\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "type": "https://api.publiq.be/probs/uitpas/rate-limited",
                      "title": "Rate limited",
                      "status": 429,
                      "detail": "Rate limited"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves the UiTID registration status of a passholder. This is step 2 in the process of registering an UiTPAS passholder in UiTID.\n\nThis endpoint requires a registation token in the `x-registration-token` header. A client can obtain such a token using [`GET /passholders/me/uitid/registration-token`](/reference/UiTPAS.v2.json/paths/~1passholders~1me~1uitid~1registration-token/get). Alternatively, a token may already be available to the client because the user may have received an email link including it.\n\nBased on the state value, the client can proceed in 2 ways:\n\n- If state is `UNREGISTERED`\n\nThe passholder can proceed to step 3, [retrieving the UiTID email address status](/reference/UiTPAS.v2.json/paths/~1uitid~1emails~1{email}/get).\n\nThe response can include the linked `email` address of the passholder if one is known. This can be used in the next step of the registration process ([`GET /uitid/emails/{email}`](/reference/UiTPAS.v2.json/paths/~1uitid~1emails~1{email}/get)). If no email address is included, the client should prompt the user to enter their email address first before proceeding to step 3.\n\n- If state is `REGISTERED` \n\nThe passholder is already `REGISTERED` so the user must continue by authenticating instead. The `email` address field contains the email address of the linked UiTID account that should be used to authenticate.\n\n\nThis caller of this method, identified with [client identification](https://docs.publiq.be/docs/authentication/ZG9jOjExODE5NDY5-client-identification) does not require any permissions.",
        "tags": [
          "UiTID"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "required": true,
            "name": "x-registration-token",
            "description": "the registration token of this passholder"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "x-client-id",
            "description": "API key identifying the calling client",
            "required": true
          }
        ]
      }
    },
    "/uitid/emails/{email}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "email",
          "in": "path",
          "required": true,
          "description": "Email address the passholder wants to use to register"
        }
      ],
      "get": {
        "summary": "Retrieve UiTID email address status",
        "operationId": "get-uitid-email",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "state": {
                      "type": "string",
                      "enum": [
                        "UITID_UNREGISTERED",
                        "UITID_REGISTERED",
                        "UITPAS_ALREADY_LINKED"
                      ]
                    }
                  },
                  "required": [
                    "state"
                  ],
                  "readOnly": true
                },
                "examples": {
                  "Example": {
                    "value": {
                      "state": "UITID_UNREGISTERED"
                    }
                  }
                }
              }
            },
            "description": "OK\n\nThe email address can be used to register the passholder."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "429": {
            "description": "Too Many Requests\n\nPossbile error types:\n\n* https://api.publiq.be/probs/uitpas/rate-limited\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "type": "https://api.publiq.be/probs/uitpas/rate-limited",
                      "title": "Rate limited",
                      "status": 429,
                      "detail": "Rate limited"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves the email address status in UiTPAS and UiTID for a given email address. This is step 3 in the process of registering an UiTPAS passholder in UiTID.\n\nThe response contains a `state` property which can be one of the following values:\n\n* `UITPAS_ALREADY_LINKED` : the user cannot use this email address to register another UiTPAS\n* `UITID_UNREGISTERED` : the user can use this email address to register their UiTPAS and must register on UiTID first\n* `UITID_REGISTERED` : the user can use this email address to register their UiTPAS and must login on UiTID first\n\nAfter [UiTID authentication](https://docs.publiq.be/docs/authentication/ZG9jOjExODE5NTM5-user-access-token) the client should proceed to step 4 of the process, [registering UiTID for the passholder](/reference/UiTPAS.v2.json/paths/~1passholders~1me~1uitid/put).\n\nThis caller of this method, identified with [client identification](https://docs.publiq.be/docs/authentication/ZG9jOjExODE5NDY5-client-identification), does not require any permissions but please note this endpoint is rate-limited on IP address to prevent abuse.",
        "tags": [
          "UiTID"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "x-client-id",
            "description": "API key identifying the calling client"
          }
        ]
      }
    },
    "/passholders/membership-prices": {
      "get": {
        "summary": "Retrieve new membership prices",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MembershipPrice"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "price": 5,
                        "cardSystem": {
                          "id": 1,
                          "name": "UiTPAS Dender"
                        }
                      },
                      {
                        "price": 5,
                        "cardSystem": {
                          "id": 8,
                          "name": "UiTPAS Gent"
                        }
                      },
                      {
                        "price": 5,
                        "cardSystem": {
                          "id": 12,
                          "name": "UiTPAS Oostende"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/invalid-postal-code\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {}
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "operationId": "get-passholders-passholderId-membership-prices",
        "description": "<!-- theme: warning -->\n\n> WARNING\n>\n> Experimental API. Breaking changes might be introduced in future updates.\n\nRetrieve the membership prices for a new passholder. All parameters are optional. If `postalCode` is specified, the most relevant price comes first.\n\nThe caller of this request must have `PRICE_READ` permission.",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "postalCode",
            "description": "postal code of the residence of the user so the result is sorted on most nearby options first. Must be a valid Belgian postal code or `0000` for foreign places."
          },
          {
            "schema": {
              "type": "string",
              "format": "date"
            },
            "in": "query",
            "name": "dateOfBirth",
            "description": "date of birth of the user used to determine the correct price. The default price is used when omitted."
          }
        ],
        "tags": [
          "Passholders"
        ],
        "security": [
          {
            "CLIENT_ACCESS_TOKEN": []
          },
          {
            "USER_ACCESS_TOKEN": []
          }
        ]
      },
      "parameters": []
    },
    "/passholders/{passholderId}/membership-prices": {
      "get": {
        "summary": "Retrieve upgrade membership prices",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MembershipPrice"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "price": 5,
                        "cardSystem": {
                          "id": 1,
                          "name": "UiTPAS Dender"
                        }
                      },
                      {
                        "price": 5,
                        "cardSystem": {
                          "id": 8,
                          "name": "UiTPAS Gent"
                        }
                      },
                      {
                        "price": 5,
                        "cardSystem": {
                          "id": 12,
                          "name": "UiTPAS Oostende"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "operationId": "get-passholders-membership-prices",
        "description": "<!-- theme: warning -->\n\n> WARNING\n>\n> Experimental API. Breaking changes might be introduced in future updates.\n\nRetrieve the membership prices for an existing passholder. The result will contain only prices for cardsystems where the passholder is not already a member. The result will be sorted on most relevant price first.\n\nThe caller of this request must have `PASSHOLDER_READ` and `PRICE_READ` permission.",
        "parameters": [],
        "tags": [
          "Passholders"
        ],
        "security": [
          {
            "CLIENT_ACCESS_TOKEN": []
          },
          {
            "USER_ACCESS_TOKEN": []
          }
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "passholderId",
          "in": "path",
          "required": true,
          "description": "The id of the passholder"
        }
      ]
    },
    "/passholders/me/uitid": {
      "parameters": [],
      "put": {
        "summary": "Register UiTID for passholder",
        "operationId": "register-uitid-passholder",
        "responses": {
          "201": {
            "description": "Created. No Content."
          },
          "400": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/passholder-already-registered\n* https://api.publiq.be/probs/uitpas/uitid-already-registered\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "description": "Registers the UiTID for this passholder. This is step 4, and the final step, in the process of registering an UiTPAS passholder in UiTID.\n\nThis request requires an `Authorization` header with the [user access token](https://docs.publiq.be/docs/authentication/ZG9jOjExODE5NTM5-user-access-token) of an authenticated UiTID *and* it requires a `x-registration-token` header containing a valid registration token of the passholder.\n\nA user access token of a client with `PASSHOLDER_REGISTER_UITID` permission is mandatory.",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          }
        ],
        "tags": [
          "UiTID"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "x-registration-token",
            "description": "the registration token of this passholder",
            "required": true
          }
        ]
      }
    },
    "/passholders/me": {
      "get": {
        "summary": "Retrieve passholder for the current user",
        "tags": [
          "Passholders"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Passholder"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "string",
                      "name": "string",
                      "firstName": "string",
                      "inszNumber": "string",
                      "dateOfBirth": "2000-01-01",
                      "postalCode": "9300",
                      "registrationOrganizer": {
                        "id": "1234",
                        "name": "Example UiTPAS Organizer"
                      },
                      "cardSystemMemberships": [
                        {
                          "cardSystem": {
                            "id": 0,
                            "name": "string"
                          },
                          "uitpasNumber": "string",
                          "status": "ACTIVE"
                        }
                      ],
                      "email": "string",
                      "creationDate": "2019-08-24T14:15:22Z"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found\n\nIf the user does not have a passholder. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/passholder-not-found\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "get-passholders-me",
        "description": "Allows users to retrieve their passholder using a user access token.\n\nA user access token of a client with `PASSHOLDER_SELF_READ` permission is mandatory. The passholder is retrieved by `inszNumber` if the access token contains the custom claim `https://publiq.be/rrn` (i.e. user has logged in using connection ACM), or by linked UiTID user (`sub` or `https://publiq.be/uitidv1id` claim of the user access token).",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          }
        ],
        "parameters": []
      },
      "post": {
        "summary": "Register passholder for the current user",
        "operationId": "post-passholders-me",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Passholder"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "a1e0a6d9-7272-4214-b3bc-17d43f965b43",
                      "name": "Lastname",
                      "firstName": "Firstname",
                      "inszNumber": "19800101003",
                      "cardSystemMemberships": [
                        {
                          "cardSystem": {
                            "id": 27,
                            "name": "UiTPAS Example Cardsystem"
                          },
                          "uitpasNumber": "0999100000002",
                          "status": "ACTIVE"
                        }
                      ],
                      "postalCode": "9000",
                      "city": "Gent",
                      "email": "firstname.lastname@example.com",
                      "creationDate": "2021-10-15T09:50:51+00:00",
                      "dateOfBirth": "2000-08-24",
                      "registrationOrganizer": {
                        "id": "d2f898b1-455e-44ee-b08a-c4c05b1ab900",
                        "name": "UiTPAS Example organizer"
                      },
                      "points": 3
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/insz-in-token-required\n* https://api.publiq.be/probs/uitpas/organizer-not-found\n* https://api.publiq.be/probs/uitpas/cardsystem-not-found\n* https://api.publiq.be/probs/uitpas/forbidden-underaged\n* https://api.publiq.be/probs/uitpas/invalid-city\n\nThe detail property might include more information for the client developer."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        },
        "description": "<!-- theme: warning -->\n\n> WARNING\n>\n> Experimental API. Breaking changes might be introduced in future updates.\n\nAllows users to self-register a passholder using a user access token.\n\nA user access token of a client with `PASSHOLDER_SELF_REGISTRATION` permission for the `registrationOrganizer` is mandatory. Furthermore, the user access token must contain the custom claim `https://publiq.be/rrn` (i.e. user has to login using connection ACM).\n\nPlease note a user can only self-register one passholder. Use `GET /passholders/me` to check if a passholder already exists for this user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PassholderSelfRegistration"
              },
              "examples": {
                "Example": {
                  "value": {
                    "name": "Lastname",
                    "firstName": "Firstname",
                    "cardSystem": {
                      "id": 27
                    },
                    "email": "firstname.lastname@example.com",
                    "dateOfBirth": "1980-01-01",
                    "postalCode": "9000",
                    "city": "Gent",
                    "registrationOrganizer": {
                      "id": "d2f898b1-455e-44ee-b08a-c4c05b1ab900"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          }
        ],
        "tags": [
          "Passholders"
        ]
      },
      "parameters": []
    },
    "/passholders/{passholderId}/school": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "passholderId",
          "in": "path",
          "required": true,
          "description": "The id of the passholder"
        }
      ],
      "get": {
        "summary": "Get passholder school",
        "operationId": "get-passholders-school",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organizer"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "id": "9c47936c-bdee-11eb-8529-0242ac130003"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not found. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/passholder-not-found\n* https://api.publiq.be/probs/uitpas/school-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "description": "Retrieve the passholder's school.\n\nThe caller of this request must have `PASSHOLDER_SEARCH` permission.\n\n<!-- theme: warning -->\n\n> Passholder schools are used to manage passholders in a very specific case. If you are not explicitly working with UiTPAS schools, you will probably **NOT** need this API. \n\nUsing [GET](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/get), [PUT](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/put) and [DELETE](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/delete) on this endpoint, the school of a passholder can be retrieved, updated and deleted. All schools are organizers.",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "tags": [
          "Schools"
        ]
      },
      "put": {
        "summary": "Update passholder school",
        "operationId": "put-passholders-school",
        "responses": {
          "204": {
            "description": "No Content. Update succeeded."
          },
          "400": {
            "description": "Bad request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/school-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not found. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/passholder-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "description": "Update the passholder's school relation.\n\nThe caller of this request must have `PASSHOLDER_UPDATE` permission.\n\n<!-- theme: warning -->\n\n> Passholder schools are used to manage passholders in a very specific case. If you are not explicitly working with UiTPAS schools, you will probably **NOT** need this API. \n\nUsing [GET](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/get), [PUT](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/put) and [DELETE](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/delete) on this endpoint, the school of a passholder can be retrieved, updated and deleted. All schools are organizers.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Organizer"
              }
            }
          },
          "description": "The Organizer object representing the school, with at least the id present. Name will be ignored."
        },
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "tags": [
          "Schools"
        ]
      },
      "delete": {
        "summary": "Delete passholder school",
        "operationId": "delete-passholders-school",
        "responses": {
          "204": {
            "description": "No Content. Delete succeeded."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not found. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/passholder-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "description": "Delete the passholder's school relation.\n\nThe user or client performing this request must have `PASSHOLDER_UPDATE` permission.\n\n<!-- theme: warning -->\n\n> Passholder schools are used to manage passholders in a very specific case. If you are not explicitly working with UiTPAS schools, you will probably **NOT** need this API. \n\nUsing [GET](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/get), [PUT](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/put) and [DELETE](/reference/UiTPAS.v2.json/paths/~1passholders~1{passholderId}~1school/delete) on this endpoint, the school of a passholder can be retrieved, updated and deleted. All schools are organizers.",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "tags": [
          "Schools"
        ]
      }
    },
    "/organizers/{organizerId}/financial-reports/periods": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizerId",
          "in": "path",
          "required": true,
          "description": "The id of the organizer"
        }
      ],
      "get": {
        "summary": "Get suggested financial report periods",
        "tags": [
          "Financial reports"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportPeriod"
                  }
                },
                "examples": {
                  "example-1": {
                    "value": [
                      {
                        "startDate": "2019-08-24",
                        "endDate": "2019-08-24"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/organizer-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "get-organizers-financial-reports-periods",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "description": "Retrieve suggested report periods for an organizer.\n\nThe caller of this request must have `ORGANIZER_REPORTS` permission for the given organizer.\n"
      }
    },
    "/organizers/{organizerId}/financial-reports": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizerId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Start an export of a financial report",
        "operationId": "post-organizers-financial-reports",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                },
                "examples": {
                  "Example of started export": {
                    "value": {
                      "status": "STARTED",
                      "id": 232432
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/organizer-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "tags": [
          "Financial reports"
        ],
        "description": "Starts a financial report export. The result of this request is a `reportId` that can be used to request the status of the report export and the download.\n\nThe caller of this request must have `ORGANIZER_REPORTS` permission for the given organizer.\n",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportPeriod"
              },
              "examples": {
                "Example": {
                  "value": {
                    "startDate": "2019-07-01",
                    "endDate": "2019-09-30"
                  }
                }
              }
            }
          },
          "description": "The period for which to generate the financial report. \nThe `ReportPeriod` object can be retrieved using `GET /organizers/{organizerId}/financial-reports/periods` or the `startDate` and `endDate` can be customized."
        }
      },
      "get": {
        "summary": "Get financial report exports",
        "operationId": "get-organizers-financial-reports",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Report"
                  }
                },
                "examples": {
                  "Example": {
                    "value": [
                      {
                        "status": "STARTED",
                        "id": 0,
                        "message": "string",
                        "period": {
                          "startDate": "2019-08-24",
                          "endDate": "2019-08-24"
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/organizer-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "description": "Get previously exported financial reports. \n\n> Note: Reports will only be available for a limited amount of time. When they become unavailable, a new export can be requested using `POST /organizers/{organizerId}/financial-reports`  \n\n\nThe caller of this request must have `ORGANIZER_REPORTS` permission for the given organizer.\n",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ],
        "tags": [
          "Financial reports"
        ]
      }
    },
    "/organizers/{organizerId}/financial-reports/{reportId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizerId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "integer"
          },
          "name": "reportId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get financial report status",
        "tags": [
          "Financial reports"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                },
                "examples": {
                  "Example of a started report": {
                    "value": {
                      "id": 23243,
                      "status": "STARTED"
                    }
                  },
                  "Example of an available report": {
                    "value": {
                      "id": 23244,
                      "status": "AVAILABLE"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/organizer-not-found\n* https://api.publiq.be/probs/uitpas/report-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "get-organizers-financial-reports-reportId",
        "description": "Retrieve the status of a previously started report export.\n\nThe caller of this request must have `ORGANIZER_REPORTS` permission for the given organizer.\n",
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ]
      }
    },
    "/organizers/{organizerId}/financial-reports/{reportId}.zip": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "organizerId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "integer"
          },
          "name": "reportId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Download financial report",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/x-zip-compressed": {
                "schema": {},
                "examples": {}
              }
            },
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string",
                  "example": "attachment; filename=\"financialOverview_organizerX_20210526_1512.zip\""
                },
                "description": "Header indicating that this response should be handled as a separate file download"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/organizer-not-found\n* https://api.publiq.be/probs/uitpas/report-not-found\n\nThe detail property might include more information for the client developer.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {}
              }
            }
          }
        },
        "operationId": "get-organizers-financial-reports-reportId-zip",
        "description": "Retrieve the actual report zip file of an `available` report.\n\nThe caller of this request must have `ORGANIZER_REPORTS` permission for the given organizer.\n",
        "tags": [
          "Financial reports"
        ],
        "security": [
          {
            "USER_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          },
          {
            "CLIENT_ACCESS_TOKEN": [
              "https://api.publiq.be/auth/uitpas"
            ]
          }
        ]
      }
    },
    "/passes/{uitpasNumber}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "uitpasNumber",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Retrieve pass",
        "tags": [
          "Passholders"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                },
                "examples": {
                  "Example": {
                    "value": {
                      "passholderId": "b34c19fc-bcf9-4d10-aeb2-6bc9efd38b68",
                      "uitpasNumber": "0560002524314",
                      "points": 12,
                      "postalCode": "1000",
                      "socialTariffExpired": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request. Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/card-blocked\n* https://api.publiq.be/probs/uitpas/card-invalid-status\n\nThe detail property might include more information for the client developer."
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "description": "Not Found0 Possbile error types:\n\n* https://api.publiq.be/probs/uitpas/card-not-found\n\nThe detail property might include more information for the client developer."
          }
        },
        "operationId": "get-cards-uitpasNumber",
        "security": [
          {
            "USER_ACCESS_TOKEN": []
          },
          {
            "CLIENT_ACCESS_TOKEN": []
          }
        ],
        "description": "Retrieve information related to a pass.\n\nThe caller of this request must have `PASS_READ` permission."
      }
    }
  },
  "components": {
    "schemas": {
      "Tariff": {
        "type": "object",
        "title": "Tariff",
        "description": "The Tariff describes the discounted price a passholder has to pay for a given ticket. ",
        "x-internal": false,
        "x-examples": {
          "example-1": {
            "value": {
              "id": "string",
              "name": "string",
              "price": 0,
              "type": "SOCIALTARIFF"
            }
          }
        },
        "x-tags": [
          "Models"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": ""
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "price": {
            "type": "number",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "enum": [
              "SOCIALTARIFF",
              "COUPON"
            ],
            "readOnly": true
          }
        },
        "required": [
          "id"
        ]
      },
      "MembershipPrice": {
        "type": "object",
        "title": "MembershipPrice",
        "description": "The MembershipPrice describes the price an UiTPAS membership in a specific cardsystem for a new or existing passholder.  ",
        "x-internal": false,
        "x-examples": {
          "Example": {
            "price": 5,
            "cardSystem": {
              "id": 1,
              "name": "UiTPAS Oostende"
            }
          }
        },
        "x-tags": [
          "Models"
        ],
        "properties": {
          "price": {
            "description": "",
            "type": "number"
          },
          "cardSystem": {
            "$ref": "#/components/schemas/CardSystem"
          }
        },
        "required": [
          "price",
          "cardSystem"
        ]
      },
      "TicketSale": {
        "description": "Model used both for registering new ticket sales and when searching for past ticket sales.\n\nThe `passholder` field is automatically included in responses if you have PASSHOLDER_SEARCH permission. It is not required for ticket sale registrations.",
        "type": "object",
        "x-examples": {
          "New registration": {
            "regularPrice": 10,
            "regularPriceLabel": "Volwassenen",
            "tariff": {
              "id": "COUPON1234"
            },
            "eventId": "CBA2D826-9E85-47BD-8E0B-2BC7882E68FB",
            "uitpasNumber": "1234567890"
          },
          "After registration": {
            "id": "12345",
            "regularPrice": 10,
            "regularPriceLabel": "Volwassenen",
            "tariff": {
              "id": "COUPON1234",
              "name": "Cultuurbon 6 euro",
              "price": 1.5
            },
            "eventId": "CBA2D826-9E85-47BD-8E0B-2BC7882E68FB",
            "uitpasNumber": "1234567890",
            "passholder": {
              "id": "string",
              "name": "string",
              "firstName": "string",
              "inszNumber": "string",
              "cardSystemMemberships": [
                {
                  "cardSystem": {
                    "id": 1,
                    "name": "UiTPAS Dender"
                  },
                  "uitpasNumber": "0560002524314",
                  "status": "ACTIVE",
                  "socialTariff": {
                    "endDate": "2022-08-24T14:15:22Z",
                    "inGracePeriod": false,
                    "expired": false
                  }
                }
              ]
            }
          }
        },
        "title": "TicketSale",
        "x-tags": [
          "Models"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id of a registered ticket sale. Not required for new ticket sale registrations",
            "readOnly": true
          },
          "regularPrice": {
            "type": "number",
            "description": "Regular price of the ticket before UiTPAS discounts"
          },
          "regularPriceLabel": {
            "type": "string",
            "description": "Optional descriptive label of the regular price. Used in financial reporting"
          },
          "tariffId": {
            "type": "string",
            "deprecated": true
          },
          "tariff": {
            "$ref": "#/components/schemas/Tariff"
          },
          "eventId": {
            "type": "string",
            "minLength": 1,
            "description": "Id of the event that the ticket sale was for"
          },
          "uitpasNumber": {
            "type": "string",
            "minLength": 1,
            "description": "The passholder's UiTPAS number used to register this ticket sale. Note that the uitpasNumber of a passholder might change over time. This field will always contain the uitpasNumber used when registering the ticket sale. To identify the passholder, use the `passholder` field."
          },
          "passholder": {
            "$ref": "#/components/schemas/Passholder"
          }
        },
        "required": [
          "regularPrice",
          "tariff",
          "eventId",
          "uitpasNumber"
        ]
      },
      "Error": {
        "$ref": "https://raw.githubusercontent.com/cultuurnet/stoplight-docs-errors/main/models/Error.json"
      },
      "OrganizerPermissions": {
        "title": "OrganizerPermissions",
        "type": "object",
        "x-tags": [
          "Models"
        ],
        "properties": {
          "organizer": {
            "$ref": "#/components/schemas/Organizer"
          }
        },
        "required": [
          "organizer"
        ]
      },
      "Organizer": {
        "title": "Organizer",
        "type": "object",
        "x-tags": [
          "Models"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "PassholdersPaginatedResponse": {
        "title": "PassholdersPaginatedResponse",
        "type": "object",
        "x-tags": [
          "Models"
        ],
        "description": "Paginated response object for passholders",
        "properties": {
          "totalItems": {
            "type": "integer"
          },
          "member": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Passholder"
            }
          }
        }
      },
      "OrganizersPaginatedResponse": {
        "title": "OrganizersPaginatedResponse",
        "type": "object",
        "x-tags": [
          "Models"
        ],
        "description": "Paginated response object for organizers",
        "properties": {
          "totalItems": {
            "type": "integer"
          },
          "member": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organizer"
            }
          }
        }
      },
      "TicketSalesPaginatedResponse": {
        "title": "TicketSalesPaginatedResponse",
        "type": "object",
        "x-tags": [
          "Models"
        ],
        "description": "Paginated response object for ticket sales",
        "properties": {
          "totalItems": {
            "type": "integer"
          },
          "member": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketSale"
            }
          }
        }
      },
      "Passholder": {
        "title": "Passholder",
        "type": "object",
        "x-tags": [
          "Models"
        ],
        "description": "Person who holds an UiTPAS, the end-user of an UiTPAS. \n\nA `Passholder` can be identified by its `id`. However, there are cases where the passholder identifies using one of its UiTPAS numbers. That number is CardSystem specific, so it can be found under `cardSystemMemberships`. Every passholder should have at least one cardsystem membership.",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "inszNumber": {
            "type": "string"
          },
          "cardSystemMemberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CardSystemMembership"
            }
          },
          "email": {
            "type": "string"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "postalCode": {
            "type": "string"
          },
          "city": {
            "type": "string",
            "readOnly": true
          },
          "registrationOrganizer": {
            "$ref": "#/components/schemas/Organizer"
          },
          "points": {
            "type": "integer",
            "readOnly": true
          }
        },
        "required": [
          "name",
          "firstName",
          "cardSystemMemberships",
          "dateOfBirth",
          "postalCode",
          "registrationOrganizer"
        ]
      },
      "Card": {
        "type": "object",
        "title": "Card",
        "x-tags": [
          "Models"
        ],
        "description": "The `Card` entity includes basic information about the card and the related `Passholder`.  ",
        "properties": {
          "passholderId": {
            "type": "string",
            "readOnly": true
          },
          "uitpasNumber": {
            "type": "string",
            "readOnly": true
          },
          "points": {
            "type": "integer",
            "readOnly": true
          },
          "postalCode": {
            "type": "string",
            "readOnly": true
          },
          "socialTariffExpired": {
            "type": "boolean",
            "description": "If the social tariff of the passholder is expired, this field will be `true`. ",
            "readOnly": true
          }
        },
        "required": [
          "passholderId",
          "uitpasNumber",
          "points",
          "postalCode"
        ],
        "readOnly": true,
        "x-examples": {
          "Example": {
            "passholderId": "b34c19fc-bcf9-4d10-aeb2-6bc9efd38b68",
            "uitpasNumber": "0560002524314",
            "points": 12,
            "postalCode": "1000",
            "socialTariffExpired": false
          }
        }
      },
      "CardSystemMembership": {
        "title": "CardSystemMembership",
        "type": "object",
        "x-tags": [
          "Models"
        ],
        "properties": {
          "cardSystem": {
            "$ref": "#/components/schemas/CardSystem"
          },
          "uitpasNumber": {
            "type": "string",
            "description": "The UiTPAS number of the card that is linked to this card system membership. It is possible to have a CardSystemMembership without a card. However, a passholder always has at least one CardSystemMembership with a card."
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "BLOCKED"
            ],
            "readOnly": true
          },
          "socialTariff": {
            "type": "object",
            "properties": {
              "endDate": {
                "type": "string",
                "format": "date-time"
              },
              "inGracePeriod": {
                "type": "boolean"
              },
              "expired": {
                "type": "boolean"
              }
            },
            "required": [
              "endDate"
            ]
          }
        },
        "required": [
          "cardSystem"
        ]
      },
      "CardSystem": {
        "title": "CardSystem",
        "type": "object",
        "x-tags": [
          "Models"
        ],
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id"
        ]
      },
      "Report": {
        "type": "object",
        "title": "Report",
        "description": "The status of a started report export.",
        "x-examples": {},
        "x-tags": [
          "Models"
        ],
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "STARTED",
              "AVAILABLE",
              "FAILED"
            ]
          },
          "id": {
            "type": "integer"
          },
          "message": {
            "type": "string",
            "description": "Optional message describing why the report failed."
          },
          "period": {
            "$ref": "#/components/schemas/ReportPeriod"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "status",
          "id"
        ]
      },
      "ReportPeriod": {
        "title": "ReportPeriod",
        "type": "object",
        "description": "Start and end date of the reporting period  ",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          }
        },
        "required": [
          "startDate",
          "endDate"
        ],
        "x-tags": [
          "Models"
        ]
      },
      "EventCardSystem": {
        "title": "EventCardSystem",
        "type": "object",
        "x-examples": {
          "Example": {
            "id": 1,
            "name": "UiTPAS Dender",
            "enabled": true,
            "manualDistributionKeys": [
              {
                "id": 123,
                "name": "€1,5 halve dag",
                "enabled": true
              }
            ]
          }
        },
        "x-tags": [
          "Models"
        ],
        "description": "CardSystem in an event context, optionally including manual distributionKeys.\n\nThis model is only used in the GET and PUT `/events/{eventId}/card-systems` to configure the card systems and distribution keys for an event.\n\n<!-- theme: warning -->\n\n> **This model and corresponding endpoints are only needed for exceptional cases.** In most cases card systems and distribution keys are set automatically on events, so you don't need to retrieve or change them.\n",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the card system"
          },
          "name": {
            "type": "string",
            "description": "Name of the card system"
          },
          "enabled": {
            "type": "boolean",
            "description": "State of this card system for the event."
          },
          "manualDistributionKeys": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "Manual distribution key",
              "properties": {
                "id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean",
                  "description": "State of this manual distribution key in the card system for the event."
                }
              },
              "required": [
                "id",
                "enabled"
              ]
            }
          }
        },
        "required": [
          "id",
          "enabled"
        ]
      },
      "TariffsResponse": {
        "title": "TariffsResponse",
        "description": "Response object for tariffs",
        "type": "object",
        "x-examples": {
          "example-1": {
            "value": {
              "available": {
                "id": "string",
                "name": "string",
                "price": 0,
                "remaining": 1
              }
            }
          }
        },
        "properties": {
          "available": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TariffAvailibility"
            }
          }
        },
        "x-tags": [
          "Models"
        ]
      },
      "TariffAvailibility": {
        "x-examples": {
          "Example": {
            "id": "string",
            "name": "string",
            "price": 0,
            "type": "SOCIALTARIFF",
            "remaining": 1
          }
        },
        "description": "The `TariffAvailibility` includes all information about the `Tariff`, which describes the discounted price a passholder has to pay for a given ticket, and the `remaining` number of tickets this passholder can buy for this event at this Tariff.",
        "title": "TariffAvailibility",
        "allOf": [
          {
            "$ref": "#/components/schemas/Tariff"
          },
          {
            "type": "object",
            "properties": {
              "remaining": {
                "type": "integer",
                "example": 1,
                "readOnly": true
              }
            },
            "required": [
              "remaining"
            ]
          }
        ],
        "x-tags": [
          "Models"
        ]
      },
      "PassholderSelfRegistration": {
        "title": "PassholderSelfRegistration",
        "type": "object",
        "x-examples": {
          "Example": {
            "name": "Lastname",
            "firstName": "Firstname",
            "cardSystem": {
              "id": 27
            },
            "email": "firstname.lastname@example.com",
            "dateOfBirth": "1980-01-01",
            "postalCode": "9000",
            "city": "Gent",
            "registrationOrganizer": {
              "id": "d2f898b1-455e-44ee-b08a-c4c05b1ab900"
            }
          }
        },
        "properties": {
          "name": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date"
          },
          "email": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "cardSystem": {
            "$ref": "#/components/schemas/CardSystem"
          },
          "registrationOrganizer": {
            "$ref": "#/components/schemas/Organizer"
          }
        },
        "required": [
          "name",
          "firstName",
          "dateOfBirth",
          "postalCode",
          "city",
          "cardSystem",
          "registrationOrganizer"
        ],
        "x-tags": [
          "Models"
        ]
      }
    },
    "securitySchemes": {
      "USER_ACCESS_TOKEN": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "",
            "tokenUrl": "",
            "refreshUrl": "",
            "scopes": {}
          }
        },
        "description": "A user access token, obtained by redirecting the end user to publiq's authorization server to login. See the [authentication docs about user access tokens](https://publiq.stoplight.io/docs/authentication/docs/user-access-token.md) for more info."
      },
      "CLIENT_ACCESS_TOKEN": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "",
            "refreshUrl": "",
            "scopes": {}
          }
        },
        "description": "A client access token, obtained by exchanging your client id and client secret for a token via an HTTP request to publiq's authorization server. See the [authentication docs about client access tokens](https://publiq.stoplight.io/docs/authentication/docs/client-access-token.md) for more info."
      }
    },
    "parameters": {},
    "responses": {
      "Unauthorized": {
        "description": "Unauthorized. Your request is missing the required credentials to authenticate. See the Authentication documentation for more info.\n\n* type: https://api.publiq.be/probs/auth/unauthorized\n* detail: might contain a developer-readable explanation of the reason",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "x-examples": {
              "Unauthorized": {
                "value": {
                  "type": "https://api.publiq.be/probs/auth/unauthorized",
                  "title": "Unauthorized",
                  "status": 401
                }
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden. Your request was successfully authenticated but you do not have permission to perform this particular request.\n\n* type: https://api.publiq.be/probs/auth/forbidden\n* detail: might contain a developer-readable explanation of the reason",
        "content": {
          "application/problem+json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "x-examples": {
              "Forbidden": {
                "value": {
                  "type": "https://api.publiq.be/probs/auth/forbidden",
                  "title": "Forbidden",
                  "status": 403,
                  "detail": "user must be admin of organiser abcd1234"
                }
              }
            }
          }
        }
      }
    },
    "requestBodies": {}
  }
}